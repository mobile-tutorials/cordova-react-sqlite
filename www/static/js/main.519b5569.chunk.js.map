{"version":3,"sources":["logo.svg","App.tsx","sqlite-hook.ts","reportWebVitals.ts","index.tsx"],"names":["App","sqliteDb","database","window","sqlitePlugin","openDatabase","useState","users","setUser","sqliteUser","DatabaseManager","useEffect","initTable","exec","all","query","then","res","insert","user","args","userId","name","email","status","alert","catch","deleteUser","id","load","queryOne","update","insertMany","statements","map","item","params","execBatch","console","log","useSqlite","inputUser","setInputUser","deleteId","setDeleteId","inputId","setInputId","handleFetch","className","src","logo","alt","onClick","style","display","value","placeholder","onChange","e","target","prev","justifyContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","renderReactDom","ReactDOM","render","document","getElementById","cordova","addEventListener"],"mappings":"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","file":"static/js/main.519b5569.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useSqlite } from './sqlite-hook';\nimport { User } from './models/User';\n\nfunction App() {\n  const sqliteDb = useSqlite();\n  const [inputUser, setInputUser] = useState<User>({\n    userId: null,\n    name: '',\n    email: '',\n    status: false\n  });\n  const [deleteId, setDeleteId] = useState<string>('');\n  const [inputId, setInputId] = useState<string>('');\n\n  const handleFetch = () => {\n    sqliteDb.all().then(res => console.log(res));\n  }\n\n  const handleInputUserId = (e: any) => {\n    setInputUser((prev) => ({...prev, userId: e.target.value}));\n  };\n  const handleInputName = (e: any) => {\n    setInputUser((prev) => ({...prev, name: e.target.value}));\n  };\n  const handleInputEmail = (e: any) => {\n    setInputUser((prev) => ({...prev, email: e.target.value}));\n  };\n  const handleInputDelete = (e: any) => {\n    setDeleteId(e.target.value);\n  };\n  const handleInputId = (e: any) => {\n    setInputId(e.target.value);\n  };\n\n  const handleInsert = () => {\n    sqliteDb.insert(inputUser);\n    setInputUser((prev) => ({...prev,userId: null, name: '', email: '', status: false}));\n    handleFetch();\n  }\n\n  const handleDelete = () => {\n    sqliteDb.deleteUser(deleteId);\n    setDeleteId('');\n    handleFetch();\n  }\n\n  const load = () => {\n    sqliteDb.load(inputId);\n    setInputId('');\n  }\n\n  const handleUpdate = () => {\n    sqliteDb.update(inputUser);\n    setInputUser({userId: null, name: '', email: '', status: false});\n    handleFetch();\n  }\n\n  const inserMany = () => {\n    const users: User[] = [\n      {\n        userId: '5',\n        name: '5',\n        email: '5',\n        status: false\n      },\n      {\n        userId: '6',\n        name: '6',\n        email: '6',\n        status: false\n      },\n      {\n        userId: '6',\n        name: '7',\n        email: '7',\n        status: false\n      },\n      {\n        userId: '8',\n        name: '8',\n        email: '8',\n        status: false\n      },\n    ];\n    sqliteDb.insertMany(users);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div className='list-user'>\n        {sqliteDb.users ? sqliteDb.users.map(item => (\n          <>\n            <p>User Name: {item.name}</p>\n            <p>Email: {item.email}</p>\n            <hr />\n          </>\n        )) : (\n          <p>\n            Hello World!\n          </p>\n        )}\n          </div>\n        <button onClick={handleFetch}>Fetch</button>\n        <div style={{display: 'contents'}}>\n          <input value={inputId} placeholder='Input Id' onChange={handleInputId}/>\n        </div>\n        <button onClick={load}>Load</button>\n        <div style={{display: 'contents'}}>\n          <input value={inputUser.userId} placeholder='userId' onChange={handleInputUserId}/>\n          <input value={inputUser.name} placeholder='name' onChange={handleInputName}/>\n          <input value={inputUser.email} placeholder='email' onChange={handleInputEmail}/>\n        </div>\n        <div style={{display: 'flex', justifyContent:'space-between'}}>\n          <button onClick={handleInsert}>Insert</button>\n          <button onClick={handleUpdate}>Update</button>\n        </div>\n        <button onClick={inserMany}>Insert Many</button>\n        <div style={{display: 'contents'}}>\n          <input value={deleteId} placeholder='Delete Id' onChange={handleInputDelete}/>\n        </div>\n        <button onClick={handleDelete}>Delete</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\nimport { User } from \"./models/User\";\nimport { Statement } from \"./models/metadata\";\nimport {DatabaseManager} from \"sqlite-mobile\"\n\nexport const useSqlite = () => {\n  // @ts-ignore: Unreachable code error\n  const database = window.sqlitePlugin.openDatabase('database.db','1.0', 'user database', 1000000);\n  const [users, setUser] = useState<User[]>([]);\n  const sqliteUser = new DatabaseManager(database);\n\n  useEffect(() => {\n      (() => {\n        // deleteTable();\n        initTable();\n      })();\n  }, []);\n\n  const initTable = () => {\n    const string = `CREATE TABLE IF NOT EXISTS users(\n      userId TEXT PRIMARY KEY NOT NULL,\n      name TEXT,\n      email TEXT,\n      status BOOLEAN\n    )`;\n    sqliteUser.exec(string);\n  };\n\n  // const deleteTable = () => {\n  //   const string = `DROP TABLE users`;\n  //   sqliteUser.exec(string);\n  // }\n\n  const all = () => {\n    const string = 'select * from users';\n    return sqliteUser.query<User>(string).then(res => setUser(res));\n  };\n\n  const load = (id: string) => {\n    const string = 'SELECT * FROM users WHERE userId = ?';\n    const args = [id];\n    return sqliteUser.queryOne<User[]>(string, args).then(res => {\n      setUser(res);\n    });\n  };\n\n  const insert = (user: User) => {\n    const string = 'INSERT INTO users (userId, name, email, status) VALUES (?,?,?,?)';\n    const args =[user.userId, user.name, user.email, user.status];\n    sqliteUser.exec(string, args).then(() => {\n      alert('Insert Success!');\n    }).catch(() => alert('Insert Failed!'));\n  };\n\n  const deleteUser = (id: string) => {\n    const string = 'DELETE FROM users WHERE userId = ?';\n    const args = [id];\n    sqliteUser.exec(string, args).then(() => {\n      alert('Delete Success!');\n    }).catch(() => alert('Delete Failed!'));\n  };\n\n  const update = (user: User) => {\n    const string = 'UPDATE users SET name=?,email=?,status=? WHERE userId=?';\n    const args = [user.name, user.email, user.status, user.userId];\n    sqliteUser.exec(string, args).then(() => {\n      alert('Update Success!');\n    }).catch(() => {\n      alert('Update Failed!');\n    });\n  }\n\n  const insertMany = (users: User[]) => {\n    const statements: Statement[] = users.map((item) => {\n      return { query: 'INSERT INTO users (userId, name, email, status) VALUES (?,?,?,?)', params: [item.userId, item.name, item.email, item.status]};\n    });\n    return sqliteUser.execBatch(statements).then(() => {\n      console.log({statements});\n      alert('Success!');\n    }).catch(() => alert('Rollback!'));\n  }\n\n  return {database, all, insert, users, deleteUser, load, update, insertMany};\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst renderReactDom = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n};\n// @ts-ignore: Unreachable code error\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}